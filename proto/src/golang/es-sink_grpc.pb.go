// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: es-sink.proto

package golang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EsSinkServiceClient is the client API for EsSinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EsSinkServiceClient interface {
	DeliverAWSResources(ctx context.Context, in *AWSResources, opts ...grpc.CallOption) (*ResponseOK, error)
	DeliverAzureResources(ctx context.Context, in *AzureResources, opts ...grpc.CallOption) (*ResponseOK, error)
}

type esSinkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEsSinkServiceClient(cc grpc.ClientConnInterface) EsSinkServiceClient {
	return &esSinkServiceClient{cc}
}

func (c *esSinkServiceClient) DeliverAWSResources(ctx context.Context, in *AWSResources, opts ...grpc.CallOption) (*ResponseOK, error) {
	out := new(ResponseOK)
	err := c.cc.Invoke(ctx, "/kaytu.es_sink.v1.EsSinkService/DeliverAWSResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esSinkServiceClient) DeliverAzureResources(ctx context.Context, in *AzureResources, opts ...grpc.CallOption) (*ResponseOK, error) {
	out := new(ResponseOK)
	err := c.cc.Invoke(ctx, "/kaytu.es_sink.v1.EsSinkService/DeliverAzureResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EsSinkServiceServer is the server API for EsSinkService service.
// All implementations must embed UnimplementedEsSinkServiceServer
// for forward compatibility
type EsSinkServiceServer interface {
	DeliverAWSResources(context.Context, *AWSResources) (*ResponseOK, error)
	DeliverAzureResources(context.Context, *AzureResources) (*ResponseOK, error)
	mustEmbedUnimplementedEsSinkServiceServer()
}

// UnimplementedEsSinkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEsSinkServiceServer struct {
}

func (UnimplementedEsSinkServiceServer) DeliverAWSResources(context.Context, *AWSResources) (*ResponseOK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliverAWSResources not implemented")
}
func (UnimplementedEsSinkServiceServer) DeliverAzureResources(context.Context, *AzureResources) (*ResponseOK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliverAzureResources not implemented")
}
func (UnimplementedEsSinkServiceServer) mustEmbedUnimplementedEsSinkServiceServer() {}

// UnsafeEsSinkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EsSinkServiceServer will
// result in compilation errors.
type UnsafeEsSinkServiceServer interface {
	mustEmbedUnimplementedEsSinkServiceServer()
}

func RegisterEsSinkServiceServer(s grpc.ServiceRegistrar, srv EsSinkServiceServer) {
	s.RegisterService(&EsSinkService_ServiceDesc, srv)
}

func _EsSinkService_DeliverAWSResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AWSResources)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsSinkServiceServer).DeliverAWSResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaytu.es_sink.v1.EsSinkService/DeliverAWSResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsSinkServiceServer).DeliverAWSResources(ctx, req.(*AWSResources))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsSinkService_DeliverAzureResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AzureResources)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsSinkServiceServer).DeliverAzureResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaytu.es_sink.v1.EsSinkService/DeliverAzureResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsSinkServiceServer).DeliverAzureResources(ctx, req.(*AzureResources))
	}
	return interceptor(ctx, in, info, handler)
}

// EsSinkService_ServiceDesc is the grpc.ServiceDesc for EsSinkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EsSinkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaytu.es_sink.v1.EsSinkService",
	HandlerType: (*EsSinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeliverAWSResources",
			Handler:    _EsSinkService_DeliverAWSResources_Handler,
		},
		{
			MethodName: "DeliverAzureResources",
			Handler:    _EsSinkService_DeliverAzureResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "es-sink.proto",
}
